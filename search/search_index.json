{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to There and Bark Again","text":""},{"location":"about/","title":"About","text":""},{"location":"editor/","title":"Installing An Editor","text":""},{"location":"editor/#choosing-an-editor","title":"Choosing an Editor","text":"<p>We all know Vim is the best editor of all time. Unfortunately, It's a pain in the ass to learn...so instead we're going to use Visual Studio Code</p> <p>Follow the installation guide at This Website</p>"},{"location":"editor/#the-python-extension","title":"The Python Extension","text":"<p>Once You install Visual Studio Code, install the official Python extension found here</p>"},{"location":"howtouse/","title":"How To Use This Book","text":"<p>This book is meant to be a thorough guide that walks you through the Python programming language. Throughout the book, you will encounter different code blocks. They will be formatted in the following ways:</p>"},{"location":"howtouse/#inline-code-blocks","title":"Inline Code blocks","text":"<p>Inline code blocks will look like <code>this</code>. These will always refer to python code.</p>"},{"location":"howtouse/#multi-line-code-blocks","title":"Multi-line Code blocks","text":"<p>We will be using multi-line code blocks throughout this book. The we will vary between python code and bash (or Powershell on Windows). Generally, books will denote bash by adding a <code>$</code> to the front of a line,however I find that this leads to issues when people try to copy and paste code from this book to their editor. For this reason I've opted to title all command line code sections Command Line. Regular multi-line code blocks will have the same name as the file they are intended to be written in.</p>"},{"location":"howtouse/#command-line-code-block-example","title":"Command Line Code Block Example","text":"Command Line<pre><code>mkdir python_project\ntouch python_project/hello_world.py\n</code></pre>"},{"location":"howtouse/#python-multi-line-code-block-example","title":"Python Multi-line Code Block Example","text":"hello_world.py<pre><code>print(\"Hello World\")\n</code></pre>"},{"location":"installation/","title":"Installing Python","text":"<p>Python is easy to install and takes minutes. Follow the instructions below for your platform.</p>"},{"location":"installation/#macos","title":"macOS:","text":"<ol> <li> <p>Using Homebrew (recommended):</p> </li> <li> <p>Open Terminal.</p> </li> <li>Install Homebrew if you haven't already:</li> </ol> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <ul> <li>Install Python3</li> </ul> <pre><code>brew install python@3.9\n</code></pre> <p>Using Python.org installer:</p> <ul> <li>Go to Python.org and download the latest Python 3.x installer.</li> <li>Run the installer and follow the prompts to complete the installation.</li> </ul>"},{"location":"installation/#windows","title":"Windows:","text":"<p>Using Python.org installer:</p> <ul> <li>Go to Python.org and download the latest Python 3.x installer.</li> <li>Run the installer.</li> <li>During installation, ensure you check the option \"Add Python 3.x to PATH\".</li> <li>Click <code>Install Now</code> and follow the prompts to complete the installation.</li> </ul>"},{"location":"installation/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian):","text":"<p>Using apt (Ubuntu/Debian):</p> <ul> <li>Open Terminal.</li> <li>Update your package list:</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install Python3</li> </ul> <pre><code>sudo apt install python3\n</code></pre>"},{"location":"thestory/","title":"Meet Mosco Furifoot, the Adventurous Corgi","text":"<p>Mosco is a brave and curious Corgi living in a peaceful village at the edge of the Shire. Mosco dreams of adventures and discovering new places. One day, Mosco receives a mysterious map showing a path to a hidden treasure. Determined to find the treasure, Mosco decides to set off on a grand adventure.</p>"},{"location":"thestory/#the-call-to-adventure","title":"The Call to Adventure","text":"<p>Mosco's adventure begins with the discovery of a mysterious map. The map, marked with various locations, promises a path to hidden treasure. With a heart full of excitement and determination, Mosco decides to follow the map and embark on a journey filled with unknown challenges and discoveries.</p>"},{"location":"thestory/#journey-and-companions","title":"Journey and Companions","text":"<p>On the journey, Mosco will various companions, each bringing unique skills to the group. Together, they face challenges and solve puzzles, helping each other along the way. These companions include an elf-like cat with knowledge of ancient lore, a dwarf-like chicken skilled in craftsmanship, and a mini-cow wizard with magical abilities. The journey will not be easy. There will be dangerous enemies and tough challenges, but together, with the knowledge the party picks up along the way, Mosco and his friends will be able to succeed on their quest and retrieve the treasure they seek.</p>"},{"location":"thestory/#learning-python-through-the-adventure","title":"Learning Python Through the Adventure","text":"<p>Throughout the adventure, we will help Mosco by learning Python. Each section of this book will tackle different aspects of Python programming, mirroring Mosco's progress on the journey. By learning Python, we will assist Mosco in overcoming obstacles and achieving his goals.</p>"},{"location":"thestory/#what-you-will-learn","title":"What You Will Learn","text":"<p>Chapter 2: Basics of Python Programming</p> <ul> <li>Introduction to Python</li> <li>Setting up the Python environment</li> <li>Basic syntax and variables</li> <li>Control structures</li> </ul> <p>Chapter 3: Data Structures and Collections</p> <ul> <li>Lists and tuples</li> <li>Dictionaries and sets</li> <li>Strings and their manipulation</li> </ul> <p>Chapter 4: Functions and Modules</p> <ul> <li>Defining and using functions</li> <li>Working with modules and libraries</li> <li>File handling</li> </ul> <p>Chapter 5: Object-Oriented Programming</p> <ul> <li>Classes and objects</li> <li>Inheritance and polymorphism</li> <li>Practical OOP applications</li> </ul> <p>Chapter 6: Advanced Topics and Final Project</p> <ul> <li>Error handling and debugging</li> <li>Introduction to external libraries</li> <li>Designing and building a text-based adventure game</li> </ul>"},{"location":"whypython/","title":"Why Python","text":"<p>Python is a great general purpose programming language. It can be used for:</p> <ul> <li>Web Development</li> <li>Data Analysis</li> <li>Machine Learning</li> <li>Automation and Scripting</li> <li>Game Development</li> <li>Desktop Application Development</li> <li>Networking   and much more.</li> </ul> <p>It's great for running small scripts, or designing full featured web backends.</p>"},{"location":"whypython/#core-features","title":"Core Features","text":"<p>The following core features make python a great choice for a first programmers:</p> <ul> <li>Simple and Readable Syntax: Python emphasizes code readability with its clear and easy-to-understand syntax.</li> <li>Interpreted Language: Python code is executed line-by-line, making it easier to debug and run interactively.</li> <li>Dynamically Typed: Variable types are determined at runtime, allowing for more flexible coding.</li> <li>Extensive Standard Library: Python comes with a comprehensive standard library, providing tools for various tasks, from file handling to web development.</li> <li>Cross-Platform Compatibility: Python runs on various operating systems, including Windows, macOS, and Linux.</li> <li>Supports Multiple Paradigms: Python supports object-oriented, procedural, and functional programming styles.</li> <li>Automatic Memory Management: Python has a built-in garbage collector for memory management.</li> </ul>"}]}